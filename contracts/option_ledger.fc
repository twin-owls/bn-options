;; recv_internal is the main function of the contract and is called when it receives a message from other contracts
() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore all empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }

    slice s_addr = cs~load_msg_addr(); 
    int address = parse_work_addr(s_addr);  
    
    load_data(); ;; here we populate the storage variables
    int op = in_msg_body~load_uint(32); ;; by convention, the first 32 bits of incoming message is the op
    int query_id = in_msg_body~load_uint(64); ;; also by convention, the next 64 bits contain the "query id", although this is not always the case
    
    ;; Start Ledger
    if(op == op::start_option_ledger()) {
        check_admin_user(address);
        if(ctx_option_ledger_id != 0) {
            throw(err::invalid_option_ledger());
        }
        ctx_option_ledger_id = 1;
        ctx_users = new_dict();
        ctx_awaiting_users = new_dict();
        ;; store address to admin
        ;; ctx_admin_address = s_addr;
        ;; ctx_fee_collector_address = s_addr;
        save_data();
        return();
    }

    ;; Place Put
    if (op == op::place_put_order()) {
        int option_ledger_id = in_msg_body~load_uint(256);
        ;; check option ledger id to match with current active option ledger id
        check_option_ledger_id(option_ledger_id);
        ;; check if the user store has been initialized
        check_init_ctx_users();
        ctx_user_id = address;
        ;; check if the user has enough TON to place a bet
        check_minimum_bet_amount(msg_value);
        ;; check if the user is already in the dictionary
        var (user, found) = ctx_users.udict_get?(256, address);   
        if (found) {
            throw(err::option_already_exist());
        }           
        var data = begin_cell()
                   .store_uint(1, 32)
                   .store_coins(msg_value)
                   .store_uint(option_ledger_id, 256)
                   .end_cell();      
        ctx_users~udict_set_ref(256, ctx_user_id, data);           
        save_data();
        return ();
    }

    ;; Place Call
    if (op == op::place_call_order()) {
        int option_ledger_id = in_msg_body~load_uint(256);
        ;; check option ledger id to match with current active option ledger id
        check_option_ledger_id(option_ledger_id);
        ;; check if the user store has been initialized
        check_init_ctx_users();
        ctx_user_id = address;
        ;; check if the user has enough TON to place a bet
        check_minimum_bet_amount(msg_value);
        ctx_user_id = address;   
        var (user, found) = ctx_users.udict_get?(256, address);          
        if (found) {
            throw(err::option_already_exist());
        }  
        var data = begin_cell()
                   .store_uint(2, 32)
                   .store_coins(msg_value)
                   .store_uint(option_ledger_id, 256)
                   .end_cell();      
        ctx_users~udict_set_ref(256, ctx_user_id, data);   
        save_data();
        return ();
    }

    ;; Process Ledger
    if (op == op::process_order()) {
        ;; check if sender is the owner of the contract
        check_admin_user(address);
        var total_user_amount = get_total_users_amount();
        var total_user_count = get_total_users_count();
        var fee_withdraw_amount = 0;
        if(ctx_option_ledger_id == 0) {
            throw(err::invalid_option_ledger());
        }
        int option_ledger_id = in_msg_body~load_uint(256);
        if (option_ledger_id != ctx_option_ledger_id) {
            throw(err::invalid_process_order_id());
        }
     
        if(my_balance <= 10000000) {
            throw(err::not_enough_ton());
        }
        ;; if there are more than one user in the ledger
        if ((total_user_amount > 0)  & (total_user_count > 1)) {
            int fee_percent = in_msg_body~load_uint(32);
            ;; calculate fee amount to be withdrawn
            fee_withdraw_amount = ((total_user_amount  * fee_percent) / 100) - 10000000;
            if(fee_withdraw_amount > 0) {
                simple_transfer(ctx_fee_collector_address, fee_withdraw_amount);
            }
            if((total_user_amount - fee_withdraw_amount - 10000000)  > 0) {
                var amount_to_deduct = total_user_amount - fee_withdraw_amount - 1000000;
                if( amount_to_deduct > 0) {
                    simple_transfer(ctx_admin_address, amount_to_deduct);
                }                
            }            
        }
        ;; if only one user is in the ledger
        if(total_user_count == 1) {
            simple_transfer(ctx_admin_address, total_user_amount - 10000000);
        }
        ;; if no user is in the ledger
        if ((total_user_amount == 0) & (total_user_count == 0)){
            simple_transfer(ctx_admin_address, 10000000);
        }     
        ctx_option_ledger_id = option_ledger_id + 1; 
        ctx_awaiting_users = ctx_users;   
        ctx_users = new_dict();
        save_data();
        return();
    }

    if (op == op::withdraw_outstanding_amount()){
        check_fee_collector(address);
        int amount_to_withdraw = in_msg_body~load_uint(256);
        simple_transfer(ctx_fee_collector_address, amount_to_withdraw);
        save_data();
        return();
    }

    throw(0xffff); ;; if the message contains an op that is not known to this contract, we throw
}

;; get methods are a means to conveniently read contract data using, for example, HTTP APIs
;; they are marked with method_id
;; note that unlike in many other smart contract VMs, get methods cannot be called by other contracts

